{"version":3,"file":"component---src-pages-claim-tsx-bc93ed6d82f7186a6ff4.js","mappings":"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","sources":["webpack://non-fungible-cup/./src/components/cshirts/cshirtPreview.tsx","webpack://non-fungible-cup/./src/pages/claim.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {Link} from 'gatsby';\n\nconst CShirtsPreview = ({id, url, imgpath, collection} : {id:string, url:string, imgpath:string, collection:string}) => {\n    return (        \n        <div className=\"img-box\">            \n            <Link to={url + id + '/'}>\n                <img src={imgpath + id + \".png\"} alt={collection + ' #' + id} />\n                <div className=\"cshirt-info\">\n                    <p className=\"chsirt-number\">#{id}</p>\n                </div>\n            </Link>\n        </div>\n    );\n};\n\nexport default CShirtsPreview;","import React, { useState } from 'react';\nimport Layout from '../components/layout';\nimport InnerPageTitle from '../components/utils/inner-page-title';\nimport {Link} from 'gatsby';\nimport { BigNumber, ethers } from \"ethers\";\nimport MetamaskIcon from '../assets/images/metamask.png';\nimport Constants from '../utils/constants';\nimport CShirtsPreview from '../components/cshirts/cshirtPreview';\n\ndeclare var window: any;\nvar provider: any;\nvar mobile: boolean;\nvar isWindowEth: boolean = false;\n\nif(typeof window !== 'undefined' && window.ethereum) {\n    isWindowEth = true;\n    provider =  new ethers.providers.Web3Provider(window.ethereum);\n    window.ethereum.on(\"chainChanged\", (chainId:any) => {   \n        window.location.reload();\n    });\n}\nif(typeof window !== 'undefined') {\n    var match = window.matchMedia(\"(max-width: 991px)\");\n    mobile = match.matches;\n    match.addListener(() => {\n        mobile = match.matches;\n    });\n}\n\ntype CShirt = {\n    id: number;\n}\n\ntype Tournament = {\n    name: string;\n    tokens: CShirt[];\n}\n\nconst ClaimPage = () => { \n    const [walletAddress, setWalletAddress] = useState('');\n    const [isConnected, setIsConnected] = useState(false);\n    const [connectionMessage, setConnectionMessage] = useState('');\n    const [cshirts, setCShirts] = useState<CShirt[]>([]);\n    const [tournaments, setTournaments] = useState<Tournament[]>([]);\n    const [isCheckingWallet, setIsCheckingWallet] = useState(false);\n\n    let connectWallet;\n    if(typeof window !== 'undefined')\n    {\n        connectWallet = (async() => {\n            if(window.ethereum) {\n                try {\n                    setIsCheckingWallet(true);\n                    await provider.send('eth_requestAccounts', []);\n                    const signer = provider.getSigner();\n                    const address = await signer.getAddress();      \n                    if(address) {\n                        setWalletAddress(address);\n                        setIsConnected(true);\n                        setConnectionMessage(\"\");\n                        if(Constants.PREMINT == false) {\n                            var walletCshirts:CShirt[] = [];\n                            const contract = new ethers.Contract(Constants.CSHIRTS_CONTRACTADDRESS, Constants.CSHIRTS_CONTRACTABI, signer); \n                            const cshirts_tokens = await contract.tokensOfOwner(address);\n                            cshirts_tokens.forEach((c_token:BigNumber) => {\n                                walletCshirts.push({id: c_token.toNumber()});\n                            });\n                            setCShirts(walletCshirts);\n\n                            var walletTournaments:Tournament[] = [];\n                            Constants.TOURNAMENTS.forEach(async (tournament:any) => {\n                                if(tournament.contractaddress != \"\") {\n                                    const contract_tournament = new ethers.Contract(tournament.contractaddress, Constants.TOURNAMENTS_CONTRACTABI, signer); \n                                    const tournament_tokens = await contract_tournament.tokensOfOwner(address);                                \n                                    if(tournament_tokens-length > 0) {\n                                        var tournamentObj:Tournament = { name: tournament.name, tokens: []};\n                                        tournament_tokens.forEach((t_token:BigNumber) => {\n                                            tournamentObj.tokens.push({id: t_token.toNumber()});\n                                        });\n                                        walletTournaments.push(tournamentObj);\n                                    }  \n                                }                      \n                            });\n                            setTournaments(walletTournaments);\n                        }\n                        setIsCheckingWallet(false);\n                    }    \n                    else {\n                        setWalletAddress(\"\");\n                        setIsCheckingWallet(false);\n                    }\n                } \n                catch(err) {\n                    setConnectionMessage(err.message);\n                    setIsCheckingWallet(false);\n                }    \n            } else {\n                setConnectionMessage(\"Please install Metamask\");\n                setIsCheckingWallet(false);\n            }\n        });\n    }\n    const PageLayout = <Layout pageTitle=\"Non Fungible Cup: Claim your wins\" container=\"inner-page\">\n        <InnerPageTitle title=\"Claim wins\" subtitle=\"Connect your wallet and check you wins\" />\n        <section className=\"tf-section tf-item tf-claim\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className={mobile == false || isWindowEth ? \"col-md-12 center\" : \"hide\"}>\n                        <button className={isConnected == true ? \"hide\" : \"tf-button btn-effect active\"} onClick={connectWallet}>\n                            <span className=\"boder-fade\"></span>          \n                            <span className=\"effect\"><img src={MetamaskIcon} className=\"metamaskIcon\" />Connect your wallet</span>\n                        </button><br />                         \n                        <span><strong>{connectionMessage}</strong></span><br />\n                    </div>\n                    <div className={mobile == true && !isWindowEth ? \"col-md-12 center\" : \"hide\"}>\n                        <a href={Constants.METAMASK_MOBILE_CLAIMURL} className={isConnected == true ? \"hide\" : \"tf-button btn-effect active\"}>\n                            <span className=\"boder-fade\"></span>          \n                            <span className=\"effect\"><img src={MetamaskIcon} className=\"metamaskIcon\" />Open Metamask</span>\n                        </a>                 \n                        <span><strong>{connectionMessage}</strong></span><br />\n                    </div>             \n                </div>  \n                <div className={isConnected ? \"row\" : \"hide\"}>\n                    <div className=\"col-md-12 center\">\n                        <h4>Your C-Shirts</h4>\n                        <div className={isConnected == true && isCheckingWallet == false ? \"wallet\" : \"hide\"}>Wallet connected: {walletAddress}</div>\n                        <div className={isConnected == true && isCheckingWallet == false && cshirts.length == 0 && tournaments.length == 0 ? \"claim-container\" : \"hide\"}>\n                            <div className=\"claim-container toUpper nodata\">No C-Shirts found in your wallet</div>\n                            <div>\n                                <Link className=\"tf-button st2 btn-effect\" to=\"/cshirts\">\n                                    <span className=\"boder-fade\"></span>\n                                    <span className=\"effect\">Get a C-Shirt</span>\n                                </Link>\n                            </div>\n                        </div>\n                        <div className={isConnected == true && isCheckingWallet == false && (cshirts.length > 0 || tournaments.length > 0) ? \"claim-container\" : \"hide\"}>\n                            <div className=\"wrap-fx\">\n                                <h6>C-Shirts</h6>\n                                {cshirts.map((shirt:any) => (\n                                    <div className=\"fl-item\" key={shirt.id}>\n                                        <CShirtsPreview id={shirt.id} url=\"/cshirts/\" imgpath=\"/images/cshirts/72x72/\" collection=\"C-Shirts\" />\n                                    </div>\n                                ))} \n                            </div>\n                            <div className=\"wrap-fx\">                                \n                                {tournaments.map((t:any) => (\n                                    <div key={t.name}>\n                                        <h6>{t.name}</h6>\n                                        {t.tokens.map((c:any) => (\n                                            <div className=\"fl-item\" key={c.id}>\n                                                <CShirtsPreview id={c.id} url=\"/cshirts/\" imgpath=\"/images/cshirts/72x72/\" collection=\"C-Shirts\" />\n                                            </div>\n                                        ))}\n                                    </div>\n                                ))} \n                            </div>\n                        </div>\n                    </div>\n                </div>              \n            </div>\n        </section>\n    </Layout>\n    return(\n        PageLayout\n    );\n};\n\nexport default ClaimPage;"],"names":["id","url","imgpath","collection","React","className","Link","to","src","alt","provider","mobile","isWindowEth","window","ethereum","ethers","on","chainId","location","reload","match","matchMedia","matches","addListener","connectWallet","useState","walletAddress","setWalletAddress","isConnected","setIsConnected","connectionMessage","setConnectionMessage","cshirts","setCShirts","tournaments","setTournaments","isCheckingWallet","setIsCheckingWallet","_context2","send","signer","getSigner","getAddress","address","Constants","walletCshirts","contract","tokensOfOwner","forEach","c_token","push","toNumber","walletTournaments","tournament","contractaddress","_context","contract_tournament","tournament_tokens","length","tournamentObj","name","tokens","t_token","message","Layout","pageTitle","container","InnerPageTitle","title","subtitle","onClick","MetamaskIcon","href","map","shirt","key","CShirtsPreview","t","c"],"sourceRoot":""}